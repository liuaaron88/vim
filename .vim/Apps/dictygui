#!/usr/bin/ruby
require 'rubygems'
require 'term/ansicolor'
require 'net/http'
require 'iconv'
require 'uri'
require 'open-uri'
require 'active_record' 

@@HOME = `echo $HOME`.strip

ActiveRecord::Base.establish_connection(
  :adapter => "sqlite3",  
  :database  => "#{@@HOME}/.vim/Apps/longman.dic"
)

class Phones < ActiveRecord::Base
end


def ydict (shift)
  raise ArgumentError, 'Must specify word' if shift == nil
  include Term::ANSIColor
  Net::HTTP.start('tw.dictionary.yahoo.com', 80) {|http|
    response = http.get('/search?p=' + shift)
    @html = response.body
  }
  if ENV['LC_CTYPE'] =~ /Big5/
    @html = Iconv.new('big5', 'utf-8').iconv(@html)
  end
  i = 0
  html = @html.gsub /\r/, ""
  html = html.gsub /\n/, ""
  if html =~ /<em class="warning">/
    if html =~ /<em class="warning">.*?>(\S+)<.*?<\/em>/
      q = $1;
      print  "\nERROR: ", shift , " -> " , q , "\n"
      return ydict(q)
    else
      print "ERROR: ", shift , "\n"
      return
    end
  end
  print  "\n" + shift + "\n" 
  while html =~ /<div class=p(\w+)>(.*?)<\/div>/i
    type = $1
    line = $2
    html = $'
    $reset = reset
    line = line.gsub /^\s+/, ""
    line = line.gsub /\s+$/, ""
    if type == 'cixin'
      i = 0
    elsif type == 'chi' or type == 'eng'
      line = "\t" + line
    elsif type == 'explain'
      i = i + 1
      line = i.to_s + " " + line
    else 
      next
    end
    line = line.gsub /<b>/,'' 
    line = line.gsub /<\/b>/, ''
    line = line.gsub /<[^>]+>/, ''
    print line + "\n" 
  end
  puts ""
end

#学术字典
@@base="http://dict.cnki.net/dict_result.aspx?tjType=all&searchword="
def treatisedict(word)
  conv=Iconv.conv("UTF-8","GB2312",word)
  uri=@@base+conv
  uri=URI::escape(uri)
  begin
    str=''
    open(uri) do |f|
      str = f.read
    end
  rescue
    puts $!
  end
  pattern=/<font class=\"text6\">(.+?)<\/font>/
    result = str.scan pattern
  ret = ""
  for i in 0..result.length-2
    mean = result[i][0].gsub(/<a href=.+?>/,'').gsub(/<\/a>/,'')
    ret += mean
    ret += "\n"
  end
  return ret
end


def pdict( shift )
  ret = Phones.find(:first,:conditions => "word='#{shift}'")
  if ret!=nil
    print "Phonetic symbol:" , ret.mean , "\n"
  end
  return shift
end
print "\n"
pdict(ARGV[0])
print "\n","学术翻译","\n"
puts treatisedict(ARGV[0])
puts "------------------------------------"
ydict(ARGV[0])
